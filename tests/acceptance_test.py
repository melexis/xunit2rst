#!/usr/bin/env python3
''' Acceptance test suite for mlx.xunit2rst

The tests in this file are pure black box tests. They just check whether the
outputs of the tool match the reference output files exactly.
'''
import filecmp
import unittest
from pathlib import Path

from mlx.xunit2rst import create_parser, generate_xunit_to_rst

TOP_DIR = Path(__file__).parents[1]
TEST_OUT_DIR = Path(__file__).parent / 'test_out'
TEST_IN_DIR = Path(__file__).parent / 'test_in'


def xunit2rst_check(input_xml, output_rst, itemize_suites=False, prefix='', trim=False, type_=None, failures=False,
                    log_file='', add_links=False):
    ''' Helper function for testing whether mlx.xunit2rst produces the expected output '''
    arg_parser = create_parser()
    command = ['-i', input_xml, '-o', output_rst]
    if itemize_suites:
        command.append('--itemize-suites')
    if prefix:
        command.extend(['-p', prefix])
    if trim:
        command.append('--trim-suffix')
    if type_ is not None:
        command.extend(['--type', type_])
    if failures:
        command.extend(['-f'])
    if log_file:
        command.extend(['-l', log_file])
    if add_links:
        command.append('--links')
    print(command)
    args = arg_parser.parse_args(command)

    generate_xunit_to_rst(
        args.input_file,
        args.rst_output_file,
        args.itemize_suites,
        args.failure_message,
        args.log,
        args.links,
        args.prefix,
        args.trim_suffix,
        args.type,
    )


class TestAcceptance(unittest.TestCase):
    def setUp(self):
        ''' Setup function

        This function creates the output directory for mlx.xunit2rst to put the
        output files
        '''
        TEST_OUT_DIR.mkdir(exist_ok=True)

    def test_xunit_default(self):
        '''Tests based on reports generated by `robot --xunit` '''
        file_name = 'itest_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='ITEST-')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_custom_prefix(self):
        '''Tests based on reports generated by `robot --xunit` '''
        file_name = 'itest_lin_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='ITEST_LIN-')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_no_prefix(self):
        '''Tests based on reports generated by `robot --xunit` '''
        file_name = 'itest_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_trim_suffix(self):
        '''Tests based on reports generated by `robot --xunit` '''
        file_name = 'itest_lin_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='ITEST_LIN_-', trim=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_trim_suffix_not_needed(self):
        '''Tests based on reports generated by `robot --xunit` '''
        file_name = 'itest_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='ITEST-', trim=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_overwrite_discernment(self):
        '''Tests based on reports generated by `robot --xunit` - forcing script to treat input as unit test report '''
        rst_file_name = '{}.rst'.format('itest_as_utest_report')
        xml_file_name = '{}.xml'.format('itest_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='ITEST-', type_='u')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_junit_default(self):
        '''Tests based on utest reports in JUnit format - itemizing testcase elements '''
        file_name = 'utest_my_lib_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, itemize_suites=False, prefix='')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_junit_itemize_testsuites(self):
        '''Tests based on utest reports in JUnit format - itemizing testsuite elements'''
        rst_file_name = '{}.rst'.format('utest_my_lib_suites_report')
        xml_file_name = '{}.xml'.format('utest_my_lib_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, itemize_suites=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_junit_prefix(self):
        '''Tests based on utest reports in JUnit format - adding prefix via input arg'''
        rst_file_name = '{}.rst'.format('utest_my_lib_suites_report')
        xml_file_name = '{}.xml'.format('utest_my_lib_no_prefix_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='UTEST_MY_LIB-', itemize_suites=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_junit_override_xml_prefix(self):
        '''Tests based on utest reports in JUnit format - adding prefix via input arg'''
        rst_file_name = '{}.rst'.format('utest_override_prefix_report')
        xml_file_name = '{}.xml'.format('utest_my_lib_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='OVERRIDING-')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_junit_qualification(self):
        '''Tests based on utest reports in JUnit format - testing qualification test type '''
        file_name = 'qtest_my_lib_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, itemize_suites=False, type_='q')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_failure_messages(self):
        '''Tests based on itest reports in xUnit format - including failure messages'''
        rst_file_name = '{}.rst'.format('itest_lin_report_failures')
        xml_file_name = '{}.xml'.format('itest_lin_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, failures=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_junit_failure_messages(self):
        '''Tests based on utest reports in JUnit format - including failure messages'''
        rst_file_name = '{}.rst'.format('utest_my_lib_report_failures')
        xml_file_name = '{}.xml'.format('utest_my_lib_no_prefix_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, failures=True, itemize_suites=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_log_file(self):
        '''Test linking to log file'''
        rst_file_name = '{}.rst'.format('itest_report_log')
        xml_file_name = '{}.xml'.format('itest_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, log_file='itest_log.html')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_log_file_links(self):
        '''Test linking to log file for each test case'''
        rst_file_name = '{}.rst'.format('itest_report_log_links')
        xml_file_name = '{}.xml'.format('itest_report')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, log_file='itest_log.html', add_links=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_log_file_links_multiple_suites(self):
        '''Test linking to log file for each test case with multiple suites in the report'''
        rst_file_name = '{}.rst'.format('itest_report_log_links_multisuite')
        xml_file_name = '{}.xml'.format('itest_lin_report_multisuite')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, log_file='itest_log.html', add_links=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_support_for_skipped_junit(self):
        '''Tests based on utest reports in JUnit format - test support for skipped tests'''
        file_name = 'utest_my_lib_report_skipped'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, itemize_suites=False, prefix='')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_support_for_skipped_itemize_suites(self):
        '''Tests based on utest reports in JUnit format - test support for skipped tests when itemizing test suites'''
        rst_file_name = '{}.rst'.format('utest_my_lib_suites_report_skipped')
        xml_file_name = '{}.xml'.format('utest_my_lib_report_skipped')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, itemize_suites=True, prefix='', failures=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_support_for_skipped_xunit(self):
        '''Tests based on itest reports in xUnit format - including failure messages and a test that was skipped'''
        rst_file_name = '{}.rst'.format('itest_report_skipped_failures_log')
        xml_file_name = '{}.xml'.format('itest_report_skipped')
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, failures=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_extra_content(self):
        file_name = 'itest_report_extra_content'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, prefix='ITEST-')

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_rf6(self):
        file_name = 'rf6_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, log_file='log.html', add_links=True)
        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)

    def test_xunit_rf6_multisuite(self):
        file_name = 'rf6_multisuite_report'
        rst_file_name = '{}.rst'.format(file_name)
        xml_file_name = '{}.xml'.format(file_name)
        input_xml = str(TEST_IN_DIR / xml_file_name)
        output_rst = str(TEST_OUT_DIR / rst_file_name)
        xunit2rst_check(input_xml, output_rst, type_='q', prefix='SWQTEST-', log_file='log.html', add_links=True)

        reference_rst = str(TEST_IN_DIR / rst_file_name)
        assert filecmp.cmp(output_rst, reference_rst)


if __name__ == '__main__':
    unittest.main()
